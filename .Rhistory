for (i in 1:nloc){
for (j in 1:nspp){
y[i,j]=rbinom(1,size=1,prob=psi[z[i],w[j]])
}
}
image(y)
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ngroup.loc=10
ngroup.spp=10
gamma.v=0.1
gamma.u=0.1
nloc=nrow(dat)
nspp=ncol(dat)
#get initial values
theta=rep(1/ngroup.loc,ngroup.loc)
phi=rep(1/ngroup.spp,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
w=sample(1:ngroup.spp,size=nspp,replace=T)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
#useful stuff
dat1m=1-dat
vec.llk.prior=rep(NA,ngibbs)
param=list(z=z,w=w,psi=psi,theta=theta,phi=phi)
#start gibbs sampler
options(warn=2)
llk.prior.max=-Inf
for (i in 1:ngibbs){
print(i)
param$psi=sample.psi(param=param,dat=dat,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp)
# param$psi=rbind(cbind(psi.true,0.01,0.01,0.01,0.01,0.01,0.01,0.01),0.01,0.01,0.01,0.01,0.01)
lpsi=log(param$psi)
l1mpsi=log(1-param$psi)
param$theta=sample.theta(param=param,ngroup.loc=ngroup.loc,gamma.v=gamma.v)
# param$theta=c(theta.true,rep(0,ngroup.stude-length(theta.true)))
param$phi=sample.phi(param=param,ngroup.spp=ngroup.spp,gamma.u=gamma.u)
# param$phi=c(phi.true,rep(0,ngroup.quest-length(phi.true)))
param$z=samplez(ltheta=log(param$theta),dat=dat,dat1m=dat1m,lpsi=lpsi,l1mpsi=l1mpsi,
w=param$w-1,runi=runif(nrow(dat)))
# param$z=z.true
param$w=samplew(lphi=log(param$phi),dat=dat,dat1m=dat1m,lpsi=lpsi,l1mpsi=l1mpsi,
z=param$z-1,runi=runif(ncol(dat)))
# param$w=w.true
#get logl
psi1=psi[param$z,]
psi2=psi[,param$w]
loglikel=dat*log(psi2)+dat1m*log(1-psi2)
v=convertNormaltoSB(param$theta)
# convertSBtoNormal(v); param$theta
u=convertNormaltoSB(param$phi)
v[v==1]=NA
u[u==1]=NA
tmp=sum(loglikel)+
sum(dbeta(v,1,gamma.v,log=T),na.rm=T)+
sum(dbeta(u,1,gamma.u,log=T),na.rm=T)
#store MAP results
if (tmp>llk.prior.max){
psi=param$psi
theta=param$theta
phi=param$phi
w=param$w
z=param$z
iter=i
llk.prior.max=tmp
}
#store general results
vec.llk.prior[i]=tmp
}
tmp=sample.psi(param=param,dat=dat,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
nloc=nrow(dat)
nspp=ncol(dat)
#get initial values
theta=rep(1/ngroup.loc,ngroup.loc)
phi=rep(1/ngroup.spp,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
w=sample(1:ngroup.spp,size=nspp,replace=T)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
#useful stuff
dat1m=1-dat
vec.llk.prior=rep(NA,ngibbs)
param=list(z=z,w=w,psi=psi,theta=theta,phi=phi)
#start gibbs sampler
options(warn=2)
llk.prior.max=-Inf
tmp=sample.psi(param=param,dat=dat,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp)
str(tmp)
param$psi=sample.psi(param=param,dat=dat,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp)
# param$psi=rbind(cbind(psi.true,0.01,0.01,0.01,0.01,0.01,0.01,0.01),0.01,0.01,0.01,0.01,0.01)
lpsi=log(param$psi)
l1mpsi=log(1-param$psi)
tmp=sample.theta(param=param,ngroup.loc=ngroup.loc,gamma.v=gamma.v)
str(tmp)
tmp=sample.theta(param=param,ngroup.loc=ngroup.loc,gamma.v=gamma.v)
param$theta=tmp$theta
param$vk=tmp$vk
tmp=sample.phi(param=param,ngroup.spp=ngroup.spp,gamma.u=gamma.u)
tmp=sample.phi(param=param,ngroup.spp=ngroup.spp,gamma.u=gamma.u)
str(tmp)
tmp=sample.phi(param=param,ngroup.spp=ngroup.spp,gamma.u=gamma.u)
param$phi=tmp$phi
param$uk=tmp$uk
param$z=samplez(ltheta=log(param$theta),dat=dat,dat1m=dat1m,lpsi=lpsi,l1mpsi=l1mpsi,
w=param$w-1,runi=runif(nrow(dat)))
param$w=samplew(lphi=log(param$phi),dat=dat,dat1m=dat1m,lpsi=lpsi,l1mpsi=l1mpsi,
z=param$z-1,runi=runif(ncol(dat)))
psi1=psi[param$z,]
psi2=psi[,param$w]
loglikel=dat*log(psi2)+dat1m*log(1-psi2)
dim(psi2)
psi1=psi[param$z,]
psi2=psi1[,param$w]
loglikel=dat*log(psi2)+dat1m*log(1-psi2)
dim(loglikel)
v=param$vk
u=param$uk
v[v==1]=NA
u[u==1]=NA
tmp=sum(loglikel)+
sum(dbeta(v,1,gamma.v,log=T),na.rm=T)+
sum(dbeta(u,1,gamma.u,log=T),na.rm=T)
v=param$vk
v=param$vk
u=param$uk
v[v==1]=NA
u[u==1]=NA
tmp=sum(loglikel)+
sum(dbeta(v,1,gamma.v,log=T),na.rm=T)+
sum(dbeta(u,1,gamma.u,log=T),na.rm=T)
tmp
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
res=SBM(dat=dat,ngroup.loc=10,ngroup.spp=10,gamma.v=0.1,gamma.u=0.1,ngibbs=ngibbs)
plot(res$llk.prior,type='l')
seq1=1500:ngibbs
plot(res$llk.prior[seq1],type='l')
rm(list=ls(all=TRUE))
set.seed(3)
setwd('U:\\GIT_models\\github_SBM')
ngroup.loc=5
ngroup.spp=3
#get parameters
tmp=runif(ngroup.loc)
theta.true=theta=tmp/sum(tmp)
tmp=runif(ngroup.spp)
phi.true=phi=tmp/sum(tmp)
set.seed(4)
psi=matrix(c(0.05,0.5,0.95,
0.5,0.05,0.95,
0.05,0.95,0.5,
0.5,0.95,0.05,
0.5,0.5,0.05),ngroup.loc,ngroup.spp,byrow=T)
psi.true=psi
#get latent variables
nloc=1000
tmp=rmultinom(1,size=nloc,prob=theta)
tmp1=rep(1:ngroup.loc,times=tmp)
z.true=z=tmp1 #if not scrambled
# z=sample(tmp1,nind);
nspp=50
tmp=rmultinom(1,size=nspp,prob=phi)
tmp1=rep(1:ngroup.spp,times=tmp)
w.true=w=tmp1 #if not scrambled
# w=sample(tmp1,nquest)
#generate data
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
for (j in 1:nspp){
y[i,j]=rbinom(1,size=1,prob=psi[z[i],w[j]])
}
}
image(y)
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
res=SBM(dat=dat,ngroup.loc=10,ngroup.spp=10,gamma.v=0.1,gamma.u=0.1,ngibbs=ngibbs)
plot(res$llk.prior,type='l')
seq1=1500:ngibbs
plot(res$llk.prior[seq1],type='l')
k=data.frame(ztrue=z.true,zestim=res$z)
table(k)
ind.loc=c(6,10,2,7,4)
plot(res$theta,type='h')
res$theta[ind.stud];theta.true
plot(res$theta,type='h')
res$theta[ind.loc];theta.true
rango=range(c(theta.true,res$theta[ind.loc]))
plot(theta.true,res$theta[ind.loc],xlim=rango,ylim=rango)
lines(rango,rango)
k=data.frame(wtrue=w.true,westim=res$w)
table(k)
k=data.frame(wtrue=w.true,westim=res$w)
table(k)
ind.spp=c(1,4,9)
res$phi[ind.spp];phi.true
rango=range(c(res$phi[ind.spp],phi.true))
plot(phi.true,res$phi[ind.spp],xlim=rango,ylim=rango)
lines(rango,rango)
psi0=res$psi
psi=psi0[,ind.spp]
psi1=psi[ind.loc,]
rango=c(0,1)
plot(psi1,psi.true,xlim=rango,ylim=rango)
lines(rango,rango)
rm(list=ls(all=TRUE))
set.seed(3)
setwd('U:\\GIT_models\\github_SBM')
ngroup.loc=5
ngroup.spp=3
#get parameters
tmp=runif(ngroup.loc)
theta.true=theta=tmp/sum(tmp)
tmp=runif(ngroup.spp)
phi.true=phi=tmp/sum(tmp)
set.seed(4)
psi=matrix(c(0.05,0.5,0.95,
0.5,0.05,0.95,
0.05,0.95,0.5,
0.5,0.95,0.05,
0.5,0.5,0.05),ngroup.loc,ngroup.spp,byrow=T)
psi.true=psi
psi.true
rm(list=ls(all=TRUE))
set.seed(3)
setwd('U:\\GIT_models\\github_SBM')
ngroup.loc=5
ngroup.spp=3
#get parameters
tmp=runif(ngroup.loc)
theta.true=theta=tmp/sum(tmp)
tmp=runif(ngroup.spp)
phi.true=phi=tmp/sum(tmp)
set.seed(4)
psi=matrix(c(0.05,0.5,0.95,
0.5,0.05,0.95,
0.05,0.95,0.5,
0.5,0.95,0.05,
0.1,0.5,0.05),ngroup.loc,ngroup.spp,byrow=T)
psi.true=psi
psi
#get latent variables
nloc=1000
tmp=rmultinom(1,size=nloc,prob=theta)
tmp1=rep(1:ngroup.loc,times=tmp)
z.true=z=tmp1 #if not scrambled
# z=sample(tmp1,nind);
nspp=50
tmp=rmultinom(1,size=nspp,prob=phi)
tmp1=rep(1:ngroup.spp,times=tmp)
w.true=w=tmp1 #if not scrambled
# w=sample(tmp1,nquest)
#generate data
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
for (j in 1:nspp){
y[i,j]=rbinom(1,size=1,prob=psi[z[i],w[j]])
}
}
image(y)
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
res=SBM(dat=dat,ngroup.loc=10,ngroup.spp=10,gamma.v=0.1,gamma.u=0.1,ngibbs=ngibbs)
rm(list=ls(all=TRUE))
set.seed(3)
setwd('U:\\GIT_models\\github_SBM')
ngroup.loc=5
ngroup.spp=3
#get parameters
tmp=runif(ngroup.loc)
theta.true=theta=tmp/sum(tmp)
tmp=runif(ngroup.spp)
phi.true=phi=tmp/sum(tmp)
set.seed(4)
psi=matrix(c(0.05,0.5,0.95,
0.5,0.05,0.95,
0.05,0.95,0.5,
0.5,0.95,0.05,
0.1,0.5,0.05),ngroup.loc,ngroup.spp,byrow=T)
psi.true=psi
#get latent variables
nloc=1000
tmp=rmultinom(1,size=nloc,prob=theta)
tmp1=rep(1:ngroup.loc,times=tmp)
z.true=z=tmp1 #if not scrambled
# z=sample(tmp1,nind);
nspp=50
tmp=rmultinom(1,size=nspp,prob=phi)
tmp1=rep(1:ngroup.spp,times=tmp)
w.true=w=tmp1 #if not scrambled
# w=sample(tmp1,nquest)
#generate data
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
for (j in 1:nspp){
y[i,j]=rbinom(1,size=1,prob=psi[z[i],w[j]])
}
}
image(y)
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
res=SBM(dat=dat,ngroup.loc=10,ngroup.spp=10,gamma.v=0.1,gamma.u=0.1,ngibbs=ngibbs)
plot(res$llk.prior,type='l')
seq1=1500:ngibbs
plot(res$llk.prior[seq1],type='l')
k=data.frame(ztrue=z.true,zestim=res$z)
table(k)
ind.loc=c(3,10,1,9,4)
plot(res$theta,type='h')
res$theta[ind.loc];theta.true
rango=range(c(theta.true,res$theta[ind.loc]))
plot(theta.true,res$theta[ind.loc],xlim=rango,ylim=rango)
lines(rango,rango)
k=data.frame(wtrue=w.true,westim=res$w)
table(k)
ind.spp=c(1,5,9)
res$phi[ind.spp];phi.true
rango=range(c(res$phi[ind.spp],phi.true))
plot(phi.true,res$phi[ind.spp],xlim=rango,ylim=rango)
lines(rango,rango)
psi0=res$psi
psi=psi0[,ind.spp]
psi1=psi[ind.loc,]
rango=c(0,1)
plot(psi1,psi.true,xlim=rango,ylim=rango)
lines(rango,rango)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
setwd('U:\\GIT_models\\github_SBM')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('SBM_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
res=SBM(dat=dat,ngroup.loc=10,ngroup.spp=10,gamma.v=0.1,gamma.u=0.1,ngibbs=ngibbs)
str(res)
plot(res$theta,type='h')
plot(res$theta[ngibbs,],type='h')
plot(res$phi[ngibbs,],type='h')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
ngibbs=1000
dat=data.matrix(read.csv('fake data.csv',as.is=T))
res=mixture.gibbs.main.func(dat=dat,ngroup=50,gamma1=0.1,ngibbs=ngibbs)
str(res)
plot(res$theta[ngibbs,],type='h')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
ngibbs=1000
dat=data.matrix(read.csv('fake data.csv',as.is=T))
res=mixture.gibbs.main.func(dat=dat,ngroup=50,gamma1=0.1,ngibbs=ngibbs)
str(res)
plot(res$theta[ngibbs,],type='h')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
ngibbs=1000
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngroup=50
burnin=ngibbs/2
one.minus.dat=1-dat
#useful settings
nloc=nrow(dat)
nspp=ncol(dat)
#initial parameter values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
gamma1=0.1
gamma.possib=seq(from=0.1,to=1,by=0.05)
#to store results from gibbs sampler
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
store.z=matrix(NA,ngibbs,nloc)
store.gamma=matrix(NA,ngibbs,1)
store.logl=rep(NA,ngibbs)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc,nspp=nspp)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc,nspp=nspp,z=z)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc,nspp=nspp,z=z)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc,nspp=nspp,z=z)
z
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
ngibbs=1000
dat=data.matrix(read.csv('fake data.csv',as.is=T))
res=mixture.gibbs.main.func(dat=dat,ngroup=50,ngibbs=ngibbs,burnin=ngibbs/2)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
source('mixture gibbs main function.R')
ngibbs=1000
dat=data.matrix(read.csv('fake data.csv',as.is=T))
res=mixture.gibbs.main.func(dat=dat,ngroup=50,ngibbs=ngibbs,burnin=ngibbs/2)
theta=res$theta[nrow(res$theta),]
z=res$z[nrow(res$z),]
phi=matrix(res$phi[nrow(res$phi),],50,nspp)
nspp=ncol(dat)
plot(theta,type='h')
sum(theta>0.01)
set.seed(1)
nloc=1000
nspp=200
ngroup=5
theta=rep(1/ngroup,ngroup)
tmp=rmultinom(nloc,size=1,prob=theta)
z.true=z=apply(tmp==1,2,which)
phi.true=phi=matrix(rbeta(ngroup*nspp,1,1),ngroup,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
phi1=phi[z[i],]
y[i,]=rbinom(nspp,size=1,prob=phi1)
}
z=res$z[nrow(res$z),]
table(z.true,z)
ind=c(2,4,9,7,3)
plot(phi.true,phi[ind,])
phi=matrix(res$phi[nrow(res$phi),],50,nspp)
ind=c(2,4,9,7,3)
plot(phi.true,phi[ind,])
