rlevels=c(10,25,50,100,200)
iter<-1000 #Number of iterations in fitting/optim
result<-matrix(nrow=iter,ncol=length(rlevels))
rtimes=round(runif(Pop,1,364),0)
rdate=as.numeric(names(table(rtimes)))
nrdate=as.numeric(table(rtimes))
oreturns=matrix(nrow=length(rdate),ncol=400)
lvs=1
Pop=rlevels[lvs] #Input population (number of individuals tagged)
Dy<-Dx<-2 #Diffusion coefficient, x and y direction, length^2 time^-1
tD=Dy
r<- 0.0 #reaction parameter (mortality if neg)
sp<-0 #spawns/Pop
Uy<-Ux<-0 #advection
##Define Grid##
yn<-xn<-20# number of grid cells on each axis
yl<-xl<-200 #domain size: 200km
dy<-yl/yn # cell size (y axis): 10km
dx<-xl/xn # cell size (x axis): 10km
midy<-ceiling(yn/2)
midx<-ceiling(xn/2)
abl=0 #boundary transfer coefficient
##Define initial conditions##
#Assuming initial concentration of 0 fish everywhere except in central pt
Init<-matrix(nrow=xn,ncol=yn, 0)
Init[midx,midy]<-Pop
rtimes=round(runif(Pop,1,364),0)
rtimes
rdate=as.numeric(names(table(rtimes)))
rdate
table(rtimes)
nrdate=as.numeric(table(rtimes))
nrdate
oreturns=matrix(nrow=length(rdate),ncol=400)
preturns=matrix(nrow=length(rdate),ncol=400)
oreturns=matrix(nrow=length(rdate),ncol=400)
preturns=matrix(nrow=length(rdate),ncol=400)
oreturns=list()
oreturns[[1]]=matrix(rpois(365*10*10,lambda=10),365,10*10)
oreturns[[1]][1:5,1:5]
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=runif(nobs))
dat1$date2=dat1$date1+runif(nobs)
head(dat1)
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=round(runif(nobs),2))
dat1$date2=dat1$date1+round(runif(nobs))
head(dat1)
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=round(runif(nobs),0))
dat1$date2=dat1$date1+round(runif(nobs))
head(dat1)
sort(unique(dat1$date1))
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=round(runif(nobs,max=10),0))
dat1$date2=dat1$date1+round(runif(nobs,max=10))
cohort.uni=sort(unique(dat1$date1))
sort(unique(dat1$date1))
length(cohort.uni)
i=1
cond=dat1$date1==cohort.uni[i]
tmp=dat1[cond,]
tmp
tmp1=table(tmp$date2)
tmp1
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=round(runif(nobs,max=10),0),grid=round(runif(nobs,min=1,to=100)))
dat1$date2=dat1$date1+round(runif(nobs,max=10))
nobs=2114
dat1=data.frame(fish.id=1:nobs,date1=round(runif(nobs,max=10),0),grid=round(runif(nobs,min=1,max=100)))
dat1$date2=dat1$date1+round(runif(nobs,max=10))
head(dat1)
cohort.uni=sort(unique(dat1$date1))
ncohort=length(cohort.uni)
oreturn=list()
i=1
cond=dat1$date1==cohort.uni[i]
tmp=dat1[cond,]
tmp1=table(tmp$date2)
head(tmp)
unique(dat1$date2)
tmp1=matrix(NA,21,100)
colnames(tmp1)=paste('grid',1:100,sep='')
rownames(tmp1)=paste('dia',1:21,sep='')
tmp1[1:5,1:5]
tmp1=matrix(0,21,100)
colnames(tmp1)=paste('grid',1:100,sep='')
rownames(tmp1)=paste('dia',1:21,sep='')
cond=dat1$date1==cohort.uni[i]
tmp=dat1[cond,]
oreturn.tmp=matrix(0,21,100)
colnames(oreturn.tmp)=paste('grid',1:100,sep='')
rownames(oreturn.tmp)=paste('dia',1:21,sep='')
cond=dat1$date1==cohort.uni[i]
tmp=dat1[cond,]
oreturn.tmp=matrix(0,21,100)
colnames(oreturn.tmp)=paste('grid',1:100,sep='')
rownames(oreturn.tmp)=paste('dia',1:21,sep='')
j=1
cond=tmp$date2==j
tmp1=tmp[cond,]
tmp1
oreturn.tmp=matrix(0,21,100)
colnames(oreturn.tmp)=paste('grid',1:100,sep='')
rownames(oreturn.tmp)=paste('dia',1:21,sep='')
j=1
cond=tmp$date2==j
tmp1=tmp[cond,]
oreturn.tmp[j,tmp1$grid]=1
oreturn.tmp[j,]
oreturn.tmp=matrix(0,21,100)
colnames(oreturn.tmp)=paste('grid',1:100,sep='')
rownames(oreturn.tmp)=paste('dia',1:21,sep='')
for (j in 0:20){
cond=tmp$date2==j
tmp1=tmp[cond,]
oreturn.tmp[j+1,tmp1$grid]=1
}
oreturn.tmp[,1:20]
rm(list=ls(all=TRUE))
set.seed(1)
nloc=1000
nspp=200
ngroup=5
theta=rep(1/ngroup,ngroup)
tmp=rmultinom(nloc,size=1,prob=theta)
z.true=z=apply(tmp==1,2,which)
phi.true=phi=matrix(rbeta(ngroup*nspp,1,1),ngroup,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
phi1=phi[z[i],]
y[i,]=rbinom(nspp,size=1,prob=phi1)
}
setwd('U:\\GIT_models\\git_mixture')
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
for (i in 1:ngibbs){
print(i)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc)
# z=z.true
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
phi=matrix(rbeta(ngroup*nspp,tmp$ncs1+1,tmp$ncs0+1),ngroup,nspp)
theta=update.theta(z=z,ngroup=ngroup,gamma1=gamma1)
#store results
store.phi[i,]=phi
store.theta[i,]=theta
}
plot(theta,type='h')
table(z.true,z)
ind=c(4,9,3,10,7)
plot(phi.true,phi[ind,])
