rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
str(tmp)
tmp=table(z)
names(tmp)
tmp=table(z)
nk=rep(0,ngroup)
nk[as.numeric(names(tmp))]=tmp
nk
cumsum(nk[ngroup:1])
cumsum(nk[ngroup:1])[ngroup:1]
106+88+110
v=rbeta(ngroup-1,nk[-ngroup]+1,n.greater.k[-1]+gamma1)
tmp=table(z)
nk=rep(0,ngroup)
nk[as.numeric(names(tmp))]=tmp
n.greater.k=cumsum(nk[ngroup:1])[ngroup:1]
v=rbeta(ngroup-1,nk[-ngroup]+1,n.greater.k[-1]+gamma1)
gamma1
gamma1=0.1
tmp=table(z)
nk=rep(0,ngroup)
nk[as.numeric(names(tmp))]=tmp
n.greater.k=cumsum(nk[ngroup:1])[ngroup:1]
v=rbeta(ngroup-1,nk[-ngroup]+1,n.greater.k[-1]+gamma1)
v
theta=rep(NA,ngroup)
tmp=1
for (i in 1:ngroup){
theta[i]=v1[i]*tmp
tmp=tmp*(1-v1[i])
}
theta
tmp=table(z)
nk=rep(0,ngroup)
nk[as.numeric(names(tmp))]=tmp
n.greater.k=cumsum(nk[ngroup:1])[ngroup:1]
v=rbeta(ngroup-1,nk[-ngroup]+1,n.greater.k[-1]+gamma1)
v1=c(v,1)
#get theta
theta=rep(NA,ngroup)
tmp=1
for (i in 1:ngroup){
theta[i]=v1[i]*tmp
tmp=tmp*(1-v1[i])
}
theta
sum(theta)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
for (i in 1:ngibbs){
print(i)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc)
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
phi=matrix(rbeta(ngroup*nspp,tmp$ncs1+1,tmp$ncs0+1),ngroup,nspp)
theta=update.theta(z=z,ngroup=ngroup,gamma1=gamma1)
#store results
store.phi[i,]=phi
store.theta[i,]=theta
}
theta
rm(list=ls(all=TRUE))
set.seed(1)
nloc=1000
nspp=200
ngroup=5
theta=rep(1/ngroup,ngroup)
tmp=rmultinom(nloc,size=1,prob=theta)
z.true=z=apply(tmp==1,2,which)
phi.true=phi=matrix(rbeta(ngroup*nspp,1,1),ngroup,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
phi1=phi[z[i],]
y[i,]=rbinom(nspp,size=1,prob=phi1)
}
setwd('U:\\independent studies\\tsbp\\mixture model\\jags')
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(1)
nloc=1000
nspp=200
ngroup=5
theta=rep(1/ngroup,ngroup)
tmp=rmultinom(nloc,size=1,prob=theta)
z.true=z=apply(tmp==1,2,which)
phi.true=phi=matrix(rbeta(ngroup*nspp,1,1),ngroup,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
phi1=phi[z[i],]
y[i,]=rbinom(nspp,size=1,prob=phi1)
}
setwd('U:\\GIT_models\\git_mixture')
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
for (i in 1:ngibbs){
print(i)
# z=update.z(dat=dat,one.minus.dat=one.minus.dat,
#            phi=phi,theta=theta,
#            ngroup=ngroup,nloc=nloc)
z=z.true
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
phi=matrix(rbeta(ngroup*nspp,tmp$ncs1+1,tmp$ncs0+1),ngroup,nspp)
theta=update.theta(z=z,ngroup=ngroup,gamma1=gamma1)
#store results
store.phi[i,]=phi
store.theta[i,]=theta
}
theta
plot(theta,type='h')
plot(phi.true,phi)
plot(phi.true,phi[1:5,])
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
for (i in 1:ngibbs){
print(i)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc)
# z=z.true
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
phi=matrix(rbeta(ngroup*nspp,tmp$ncs1+1,tmp$ncs0+1),ngroup,nspp)
theta=update.theta(z=z,ngroup=ngroup,gamma1=gamma1)
#store results
store.phi[i,]=phi
store.theta[i,]=theta
}
plot(theta,type='h')
table(z.true,z)
rm(list=ls(all=TRUE))
set.seed(1)
nloc=1000
nspp=200
ngroup=5
theta=rep(1/ngroup,ngroup)
tmp=rmultinom(nloc,size=1,prob=theta)
z.true=z=apply(tmp==1,2,which)
phi.true=phi=matrix(rbeta(ngroup*nspp,1,1),ngroup,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
phi1=phi[z[i],]
y[i,]=rbinom(nspp,size=1,prob=phi1)
}
setwd('U:\\GIT_models\\git_mixture')
write.csv(y,'fake data.csv',row.names=F)
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\git_mixture')
source('mixture gibbs functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
one.minus.dat=1-dat
#useful metrics
nloc=nrow(dat)
nspp=ncol(dat)
ngroup=10
gamma1=0.1
#initial values
z=sample(1:ngroup,size=nloc,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=runif(ngroup*nspp)
phi=matrix(tmp,ngroup,nspp)
#for gibbs sampler
ngibbs=1000
store.phi=matrix(NA,ngibbs,nspp*ngroup)
store.theta=matrix(NA,ngibbs,ngroup)
for (i in 1:ngibbs){
print(i)
z=update.z(dat=dat,one.minus.dat=one.minus.dat,
phi=phi,theta=theta,
ngroup=ngroup,nloc=nloc)
# z=z.true
tmp=ncs(dat=dat,z=z-1,nspp=nspp,nloc=nloc,ngroup=ngroup)
phi=matrix(rbeta(ngroup*nspp,tmp$ncs1+1,tmp$ncs0+1),ngroup,nspp)
theta=update.theta(z=z,ngroup=ngroup,gamma1=gamma1)
#store results
store.phi[i,]=phi
store.theta[i,]=theta
}
table(z.true,z)
ind=c(4,9,3,10,7)
plot(phi.true,phi[ind,])
